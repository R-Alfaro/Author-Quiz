{"version":3,"sources":["AuthorQuiz.js","AddAuthorForm.js","registerServiceWorker.js","index.js"],"names":["Hero","className","Book","title","onClick","Turn","author","books","highlight","onAnswerSelected","style","backgroundColor","highlightToBgColor","src","imageUrl","alt","map","Continue","show","onContinue","Footer","id","href","AuthorQuiz","connect","state","turnData","dispatch","answer","type","to","AuthorForm","props","name","bookTemp","onFieldChange","bind","handleSubmit","handleAddBook","event","preventDefault","this","onAddAuthor","setState","target","value","concat","onSubmit","htmlFor","onChange","book","React","Component","withRouter","history","push","match","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","authors","imageSource","imageAttribution","getTurnData","allBooks","reduce","p","c","i","fourRandomBooks","shuffle","slice","sample","find","some","store","Redux","action","isCorrect","Object","assign","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","Fragment","exact","path","component","AddAuthorForm","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.d232d6f5.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport './App.css';\r\nimport './bootstrap.min.css';\r\n\r\nfunction Hero() {\r\n  return (<div className=\"row\">\r\n    <div className=\"jumbotron col-10 offset-1\">\r\n      <h1>Author Quiz</h1>\r\n      <p>Select the book written by the author shown</p>\r\n    </div>\r\n  </div>);\r\n}\r\n\r\nfunction Book({title, onClick}) {\r\n  return (<div className=\"answer\" onClick={() => {onClick(title);}}>\r\n    <h4>{title}</h4>\r\n  </div>\r\n  );\r\n}\r\n\r\nfunction Turn({author, books, highlight, onAnswerSelected}) {\r\n  function highlightToBgColor(highlight) {\r\n    const mapping = {\r\n      'none': '',\r\n      'correct': 'green',\r\n      'wrong': 'red'\r\n    };\r\n    return mapping[highlight];\r\n  }\r\n\r\n  return (<div className=\"row turn\" style={{backgroundColor: highlightToBgColor(highlight)}}>\r\n    <div className=\"col-4 offset-1\">\r\n      <img src={author.imageUrl} className=\"authorimage\" alt=\"Author\"/>\r\n    </div>\r\n    <div className=\"col-6\">\r\n      {books.map((title) => <Book title={title} key={title} onClick={onAnswerSelected} />)}\r\n    </div>\r\n  </div>);\r\n}\r\n\r\nTurn.propTypes = {\r\n  author: PropTypes.shape({\r\n    name: PropTypes.string.isRequired,\r\n    imageUrl: PropTypes.string.isRequired,\r\n    imageSource: PropTypes.string.isRequired,\r\n    books: PropTypes.arrayOf(PropTypes.string).isRequired\r\n  }),\r\n  books: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n  onAnswerSelected: PropTypes.func.isRequired,\r\n  highlight: PropTypes.string.isRequired\r\n};\r\n\r\nfunction Continue({ show, onContinue }) {\r\n  return (\r\n    <div className=\"row continue\">\r\n    { show \r\n      ? <div className=\"col-11\">\r\n          <button className=\"btn btn-primary btn-lg float-right\" onClick={onContinue}>Continue</button>\r\n        </div>\r\n      : null }\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction Footer() {\r\n  return (<div id=\"footer\" className=\"row\">\r\n    <div className=\"col-12\">\r\n        <p className=\"text-muted credit\">\r\n          All images are from <a href=\"http://commons.wikimedia.org/wiki/Main_Page\">Wikemedia Commons</a> and are in the public domain\r\n        </p>\r\n    </div>\r\n  </div>);\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    turnData: state.turnData,\r\n    highlight: state.highlight\r\n  };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    onAnswerSelected: (answer) => {\r\n      dispatch({ type: 'ANSWER_SELECTED', answer });\r\n    },\r\n    onContinue: () => {\r\n      dispatch({ type: 'CONTINUE' });\r\n    }\r\n  };\r\n}\r\n\r\nconst AuthorQuiz = connect(mapStateToProps, mapDispatchToProps)(\r\n  function ({turnData, highlight, onAnswerSelected, onContinue}) {\r\n    return (\r\n      <div className=\"container-fluid\">\r\n        <hr></hr>\r\n        <Hero />\r\n        <hr></hr>\r\n        <Turn {...turnData} highlight={highlight} onAnswerSelected={onAnswerSelected} />\r\n        <Continue show={highlight === 'correct'} onContinue={onContinue}/>\r\n        <p><Link to=\"/add\">Add an author</Link></p>\r\n        <hr></hr>\r\n        <Footer />\r\n      </div>\r\n    );\r\n  });\r\n\r\nexport default AuthorQuiz;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { withRouter } from 'react-router-dom';\r\nimport \"./AddAuthorForm.css\";\r\n\r\nclass AuthorForm extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            name: '',\r\n            imageUrl: '',\r\n            books: [],\r\n            bookTemp: ''\r\n        };\r\n        this.onFieldChange = this.onFieldChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.handleAddBook = this.handleAddBook.bind(this);\r\n    }\r\n    handleSubmit(event) {\r\n        event.preventDefault();\r\n        this.props.onAddAuthor(this.state);\r\n    }\r\n    onFieldChange(event) {\r\n        this.setState({\r\n            [event.target.name]: event.target.value\r\n        });\r\n    }\r\n    handleAddBook(event) {\r\n        this.setState({\r\n            books: this.state.books.concat([this.state.bookTemp]),\r\n            bookTemp: ''\r\n        });\r\n    }\r\n    render() {\r\n        return <form onSubmit={this.handleSubmit}>\r\n            <div className=\"AddAuthorForm__input\">\r\n                <label htmlFor=\"name\">Name</label>\r\n                <input type=\"text\" name=\"name\" value={this.state.name} onChange={this.onFieldChange} />\r\n            </div>\r\n            <div className=\"AddAuthorForm__input\">\r\n                <label htmlFor=\"imageUrl\">Image URL</label>\r\n                <input type=\"text\" name=\"imageUrl\" value={this.state.imageUrl} onChange={this.onFieldChange} />\r\n            </div>\r\n            <div className=\"AddAuthorForm__input\">\r\n                <label htmlFor=\"bookTemp\">Books</label>\r\n                {this.state.books.map((book) => <p key={book}>{book}</p>)}\r\n                <input type=\"text\" name=\"bookTemp\" value={this.state.bookTemp} onChange={this.onFieldChange} />\r\n                <input type=\"button\" value=\"+\" onClick={this.handleAddBook} />\r\n            </div>\r\n            <input type=\"submit\" value=\"Add\"/>\r\n        </form>;\r\n    }\r\n}\r\n\r\nfunction AddAuthorForm({match, onAddAuthor}) {\r\n    return <div className=\"AddAuthorForm\">\r\n        <h1>Add Author</h1>\r\n        <AuthorForm onAddAuthor={onAddAuthor}/>\r\n    </div>;\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch, props) {\r\n    return {\r\n        onAddAuthor: (author) => {\r\n            dispatch({ type: 'ADD_AUTHOR', author });\r\n            props.history.push('/');\r\n        }\r\n    };\r\n}\r\n\r\nexport default withRouter(connect(() => {}, mapDispatchToProps)(AddAuthorForm));\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter, Route } from 'react-router-dom';\r\nimport * as Redux from 'redux';\r\nimport * as ReactRedux from 'react-redux';\r\nimport './index.css';\r\nimport AuthorQuiz from './AuthorQuiz';\r\nimport AddAuthorForm from './AddAuthorForm';\r\nimport registerServiceWorker from './registerServiceWorker';\r\nimport {shuffle, sample} from 'underscore';\r\n\r\nconst authors = [\r\n    {\r\n      name: 'Mark Twain',\r\n      imageUrl: 'images/authors/marktwain.jpg',\r\n      imageSource: 'Wikimedia Commons',\r\n      books: ['The Adventures of Huckleberry Finn']\r\n    },\r\n    {\r\n      name: 'Joseph Conrad',\r\n      imageUrl: 'images/authors/josephconrad.png',\r\n      imageSource: 'Wikimedia Commons',\r\n      books: ['Heart of Darkness']\r\n    },\r\n    {\r\n      name: 'J.K. Rowling',\r\n      imageUrl: 'images/authors/jkrowling.jpg',\r\n      imageSource: 'Wikimedia Commons',\r\n      imageAttribution: 'Daniel Ogren',\r\n      books: ['Harry Potter and the Sorcerers Stone']\r\n    },\r\n    {\r\n      name: 'Stephen King',\r\n      imageUrl: 'images/authors/stephenking.jpg',\r\n      imageSource: 'Wikimedia Commons',\r\n      imageAttribution: 'Pinguino',\r\n      books: ['The Shining', 'IT']\r\n    },\r\n    {\r\n      name: 'Charles Dickens',\r\n      imageUrl: 'images/authors/charlesdickens.jpg',\r\n      imageSource: 'Wikimedia Commons',\r\n      books: ['David Copperfield', 'A Tale of Two Cities']\r\n    },\r\n    {\r\n      name: 'William Shakespeare',\r\n      imageUrl: 'images/authors/williamshakespeare.jpg',\r\n      imageSource: 'Wikimedia Commons',\r\n      books: ['Hamlet', 'Macbeth', 'Romeo and Juliet']\r\n    },\r\n    {\r\n      name: 'Ernest Hemingway',\r\n      imageUrl: 'images/authors/EHemingway.jpg',\r\n      imageSource: 'Wikimedia Commons',\r\n      books: ['The Sun Also Rises', 'The Old Man And The Sea', 'The Short Stories']\r\n    },\r\n    {\r\n      name: 'John Grisham',\r\n      imageUrl: 'images/authors/JGrisham.jpg',\r\n      imageSource: 'Wikimedia Commons',\r\n      books: ['The Firm', 'A Time To Kill', 'Partner']\r\n    }\r\n  ];\r\n\r\nfunction getTurnData(authors) {\r\n    const allBooks = authors.reduce(function (p, c, i) {\r\n        return p.concat(c.books);\r\n    }, []);\r\n    const fourRandomBooks = shuffle(allBooks).slice(0,4);\r\n    const answer = sample(fourRandomBooks);\r\n\r\n    return {\r\n        books: fourRandomBooks,\r\n        author: authors.find((author) => \r\n            author.books.some((title) => \r\n                title === answer))\r\n    }\r\n}\r\n\r\nfunction reducer(\r\n  state = { authors, turnData: getTurnData(authors), highlight: '' }, \r\n  action) {\r\n    switch (action.type) {\r\n      case 'ANSWER_SELECTED':\r\n        const isCorrect = state.turnData.author.books.some((book) => book === action.answer);\r\n        return Object.assign(\r\n          {}, \r\n          state, { \r\n            highlight: isCorrect ? 'correct' : 'wrong'\r\n          });\r\n      case 'CONTINUE': \r\n          return Object.assign({}, state, { \r\n            highlight: '',\r\n            turnData: getTurnData(state.authors)\r\n          });\r\n      case 'ADD_AUTHOR':\r\n          return Object.assign({}, state, {\r\n            authors: state.authors.concat([action.author])\r\n          });\r\n      default: return state;\r\n    }\r\n}\r\n\r\nlet store = Redux.createStore(\r\n  reducer,\r\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n);\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n    <ReactRedux.Provider store={store}>\r\n      <React.Fragment>\r\n        <Route exact path=\"/\" component={AuthorQuiz} />\r\n        <Route path=\"/add\" component={AddAuthorForm} />\r\n      </React.Fragment>\r\n    </ReactRedux.Provider>\r\n  </BrowserRouter>, document.getElementById('root'));\r\n\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}